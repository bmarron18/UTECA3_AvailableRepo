Title:				git usage_Windows
Project Descriptor:	Setting up a Git Version Control System with GitHub on Windows
Project ID:			UTECA1_TranslatorAPIs
Author:				bmarron
Origin Date:		25 Dec 2024
Revision Date:		10 Feb 2025




#######################
Setup steps and checks 
######################


======= STEP 1: get the ProGit manual ==================

	a. download .pdf of book (in your Reference docs in Teams)
https://git-scm.com/book/


======= STEP 2: install Windows git with "git BASH" ===============
https://gitforwindows.org/

 Git-2.48.1-64-bit.exe 

See "Windows_Install_Git_LinuxUtilities.pdf" for additional info

	a. install defaults
	a1. after installation there will be a git BASH terminal icon on your Desktop
	a2. all subsequent directions in this document assume the installation of
	    "git BASH"
	a3. all command-line commands below are prefixed with a "$"; expected output 
	    from command-line commands is given in many cases



====== (optional) STEP 2: install "GitHub for Windows" (in addition to "git BASH") ========
https://desktop.github.com/
https://help.github.com/desktop/guides/getting-started/installing-github-desktop/#platform-windows

	a. install defaults
	
###########################
General Git (local) set-up
###########################

$ git config --list		#if on a new compu, this returns nothing

==== configure global settings =========================================
	a. '--global' stores in .gitconfig (a hidden file)

	a1. set these globals (username to match GitHub username)

$ git config --global user.name "<your user name>" &&
git config --global user.email "<your email>" &&
git config --global core.editor "notepad++"&&
git config --global http.sslVerify false &&
git config --global alias.visual '!gitk'&&
git config --global alias.last 'log -1 HEAD'

$ git config --list

NOTES
	git config --global user.name "<your user name>"	<==Github user name
	git config --global user.email "<your email>" 		<== Github email
	git config --global core.editor "notepad++"
	git config --global alias.visual '!gitk'			<== gitk is a GUI
	git config --global alias.last 'log -1 HEAD'		<== see last commit



#########################################
The git workflow
track || stage || commit || push
##########################################


	a. the git file processing sequence:

new file			track	==>stage	==>commit	==>push
modified file				==>stage	==>commit	==>push




###################################################################
clone a (global) offsite repository to a (local) onsite repository
###################################################################

===== STEP 1: create a directory (folder) for (local) repo ==========

	a. in Windows FileExplorer, make a new folder to house the to-be cloned (local) repo


====== STEP 2: clone a (global) repo from GitHub =============================

	a1. login to Github / go to your Github site
https://github.com/<your user name>/

	a1. Get address of the repo of interest
https://github.com/<your user name>/<your repo name>

	b. in Windows FileExplorer, go to the newly-created directory (folder) for (local) repo
	b1. Right-Click 'Git Bash here' to open git BASH terminal

	c. clone the (global) repo
$ git clone https://github.com/<your user name>/<your repo name>

	d. check contents of the newly-created (local) repo
	d1. NB. a git-tracked directory will have a .git folder and 
	    git BASH will have the path end in "(master)" (in green)
$ cd 
$ ls -A



======= STEP 3: do checks on general git and local (.git tracked) repo ===========

	a. check current git settings gain
$ git config --list

	b. check last commit
$ git last


	c. check the onsite/offsite repository connections
	c1. a 'repository' may be a (local) onsite repository OR 
	    its (global) offsite image; the two are connected through git
	c2. NB. The default name of the cloned offsite repo is "origin" 
	c3. NB. The default name of the main branch in git is 'master'
	c4. NB. In git, "HEAD" is a pointer to the (local) repo branch youâ€™re currently on.

$ git remote -v

$ git remote show origin

	d. check branches
	d1. NB. --all shows both local and remote branches
$ git branch --all




#######################################################################
the basic workflow:
track || stage || commit || push
########################################################################

==== STEP 1. check status of git-tracked files and list currently tracked files  ==============

	a. check status of git-tracked files
$ git status

	b. list the currently git-tracked files
$ git ls-files



==== STEP 2. make changes to files in the (local) and check status ====================

	a. Paste a new file (your dictionary) into the (local) onsite repo
	a1. check new status of git-tracked files 
	a2. NB new/modified/untracked/unstaged files are in red; tracked/staged files are in green 

$ git status


==== STEP 3. track and STAGE new/modified files and check  ===================

	a. track and STAGE newly added files
	a1. "git add <file>" OR "git add --all"

$ git add --all
$ git status


==== STEP 4. COMMIT the staged file ==========================================

	a. COMMIT changes
	a1. NB. w/o -m a text editor will open to add message; no message, no commit
	b2. NB. ahead by one commit

$ git commit -a -m "date" 
$ git status


===== STEP 5. push changes from onsite repo back up to the offsite GitHub repo  =====================

	a. push the changes made in the (local) onsite repo 
	   to the (global) offsite repo
	a1. will automatically ask for
		GitHub user name
		GitHub password (token!!)
	a2. can only use the following command IF you have been given access to the 
	    global repo [o/w you will need to use a Pull Request to upload changes]

$ git push origin --all



######################
when things go wrong
#######################


	a. untrack all newly staged files
$ git reset

	b. uncommit a bad commit 
$ git commit -m "Something terribly misguided"              (1)
$ git reset HEAD~                                           (2)
<< edit files as necessary >>                               (3)
$ git add << edited files >>                                (4)
$ git commit -c ORIG_HEAD                                   (5)

	c. untracking folders/files deleted since last update
$ git rm <folder> -r


	d. git help
$ git help <verb>
$ git <verb> --help
$ man git-<verb>






#########################################
Another example of a git work cycle
###########################################

==== STEP 1. make changes and check status  ====================================

	a. make changes to 'LANDIS_on_Linux1.txt' file
	a1. check status

$ git status
						#unstaged: in red
						#staged: in green
On branch master
Changes not staged for commit:					
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   LANDIS_1/LANDIS_on_Linux1.txt		#unstaged: in red



==== STEP 2. stage and check  ===========================================

	a. use 'git add <filename>'
	a1. stage the modified file

$ git add LANDIS_1/LANDIS_on_Linux1.txt
$ git status
On branch master
Changes to be committed:					
  (use "git reset HEAD <file>..." to unstage)

	modified:   LANDIS_1/LANDIS_on_Linux1.txt		#staged: in green


==== STEP 3. commit the staged file ==========================================

	a. use 'git commit -a -m "<message>"'
	a1.  -a flag ==> all staged files committed
	a2.  -m flag ==> adds the (required) message to the commit (o/w sends you to a text editor)

$ git commit -a -m "12Aug2015"
[master e8e02ce] 12Aug2015
 1 file changed, 1 insertion(+), 1 deletion(-)


==== STEP 4. push the committed file ===================================

	a. use 'git push <offsite name> HEAD'
	a1. (HEAD ==> A handy way to push the current working branch to the same name in the offsite)
	a2. use 'git push <offsite name> <onsite branch>'

$ git push Repo_1 master
Username for 'https://github.com': bmarron18
Password for 'https://bmarron18@github.com': 
Counting objects: 7, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 457 bytes | 0 bytes/s, done.
Total 4 (delta 1), reused 0 (delta 0)
To https://github.com/bmarron18/Repo_1.git
   7831ea4..e8e02ce  master -> master


